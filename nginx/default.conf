# ===================================
# HTTP redirect to HTTPS
# ===================================
server {
    listen 80;
    server_name orderbox.local;

    return 301 https://$host$request_uri;
}

# ===================================
# HTTPS WordPress Server
# ===================================
server {
    listen 443 ssl http2;
    server_name orderbox.local;

    # --- SSL setup
    ssl_certificate /etc/nginx/certs/orderbox.local.crt;
    ssl_certificate_key /etc/nginx/certs/orderbox.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # --- Hide Nginx version
    server_tokens off;

    # --- Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=()" always;

    # --- Rate limiting (1 request/sec, burst up to 20)
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=1r/s;

    # --- Allow only safe HTTP methods
    if ($request_method !~ ^(GET|POST|HEAD)$) {
        return 405;
    }

    # --- Block obvious exploit attempts (but allow core WP files)
    if ($request_uri ~* "(eval\(|base64_|/etc/passwd|proc/self|wp-config\.php)") {
        return 444;
    }

    # --- Block known bad user agents
    if ($http_user_agent ~* "(masscan|sqlmap|nikto|curl|python|fimap|nessus|loader)") {
        return 444;
    }

    # --- Deny access to sensitive or hidden files
    location ~ /\.(ht|git|env|bash|ssh|DS_Store) {
        deny all;
    }

    # --- Serve static assets efficiently
    location ~* \.(?:jpg|jpeg|gif|png|ico|css|js|woff2?|ttf|svg|mp4|webp)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public, no-transform";
    }

    # --- Main WordPress proxy
    location / {
        limit_req zone=req_limit_per_ip burst=20 nodelay;

        proxy_pass http://wordpress:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 90;
    }

    # --- Optional: block xmlrpc.php (unless a plugin uses it)
    location = /xmlrpc.php {
        deny all;
    }

    # --- Optional: Restrict wp-login.php to your IP only
    # location = /wp-login.php {
    #     allow YOUR.IP.ADDRESS;
    #     deny all;
    #     include proxy_params;
    #     proxy_pass http://wordpress:80;
    # }
}

# ===================================
# ðŸ”Œ WebSocket Server
# ===================================
server {
    listen 443 ssl http2;
    server_name ws.orderbox.local;

    ssl_certificate /etc/nginx/certs/orderbox.local.crt;
    ssl_certificate_key /etc/nginx/certs/orderbox.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    server_tokens off;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    location / {
        proxy_pass http://websocket:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_buffering off;
    }
}
