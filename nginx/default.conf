# =================================================
# WordPress + WebSocket reverse proxy
# =================================================

# Limit_req zones must be defined at http context. In Docker you can put them at the top.
limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=1r/s;

# -------------------------------
# HTTP redirect
# -------------------------------
server {
    listen 80;
    server_name orderbox.local;

    return 301 https://$host$request_uri;
}

# -------------------------------
# HTTPS WordPress
# -------------------------------
server {
    listen 443 ssl;
    http2;

    server_name orderbox.local;

    ssl_certificate /etc/nginx/certs/orderbox.local.crt;
    ssl_certificate_key /etc/nginx/certs/orderbox.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    server_tokens off;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Only allow GET, POST, HEAD
    if ($request_method !~ ^(GET|POST|HEAD)$) {
        return 405;
    }

    # Block bad URIs
    if ($request_uri ~* "(eval\(|base64_|/etc/passwd|proc/self|wp-config\.php)") {
        return 444;
    }

    # Block bad user agents
    if ($http_user_agent ~* "(masscan|sqlmap|nikto|curl|python|fimap|nessus|loader)") {
        return 444;
    }

    # Deny hidden files
    location ~ /\.(ht|git|env|bash|ssh|DS_Store) {
        deny all;
    }

    # Serve static assets
    location ~* \.(?:jpg|jpeg|gif|png|ico|css|js|woff2?|ttf|svg|mp4|webp)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public, no-transform";
    }

    # Main WordPress proxy
    location / {
        limit_req zone=req_limit_per_ip burst=20 nodelay;

        proxy_pass http://wordpress:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 90;
    }

    # Optional: block xmlrpc.php if not used
    location = /xmlrpc.php {
        deny all;
    }
}

# -------------------------------
# WebSocket server
# -------------------------------
server {
    listen 443 ssl;
    http2;

    server_name ws.orderbox.local;

    ssl_certificate /etc/nginx/certs/orderbox.local.crt;
    ssl_certificate_key /etc/nginx/certs/orderbox.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    server_tokens off;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    location / {
        proxy_pass http://websocket:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_buffering off;
    }
}
